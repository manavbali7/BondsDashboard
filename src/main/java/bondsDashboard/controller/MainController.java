package bondsDashboard.controller;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import bondsDashboard.model.Bond;
import bondsDashboard.model.BondRepository;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/Bonds") // This means URL's start with /Bonds
public class MainController {
	@Autowired // This means to get the bean called bondRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private BondRepository bondRepository;

	@GetMapping(path="/Market")
	public @ResponseBody Iterable<Bond> getAllBonds() {
		// This returns a JSON or XML with the users
		return bondRepository.findAll();
	}
	@PostMapping(path="/Market/Buy") // Map ONLY POST Requests
	public @ResponseBody void buyBond (@RequestParam int id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Bond n = bondRepository.findById(id);
		n.setSold(true);
		DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
		Date date = new Date();
		n.setPurchased(dateFormat.format(date));
		bondRepository.save(n);
	}
	@PostMapping(path="/Market/Sell") // Map ONLY POST Requests
	public @ResponseBody void sellBond (@RequestParam int id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Bond n = bondRepository.findById(id);
		n.setSold(false);
		n.setPurchased(null);
		bondRepository.save(n);
	}
	@GetMapping(path="/Bond")
	public @ResponseBody List<Bond> getUserBySold(@RequestParam(value = "sold") boolean sold) {
		// This returns a JSON or XML with the users
		return bondRepository.findBySold(sold);
	}
}
